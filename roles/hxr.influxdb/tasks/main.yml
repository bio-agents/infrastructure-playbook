---
- name: Make sure pip is available
  package:
    name: python-pip
    state: installed

- name: Ensure influxdb is available
  pip:
    name: influxdb
    state: latest

- name: Check need to create admin
  command: |
    influx -ssl -host influxdb.galaxyproject.eu -execute "show users"
  ignore_errors: true
  register: should_create_admin
  when: not ansible_check_mode

- name: Create initial admin user
  command: |
    influx -ssl -host influxdb.galaxyproject.eu -execute "CREATE USER {{ influxdb.admin.username }} WITH PASSWORD '{{ influxdb.admin.password }}' WITH ALL PRIVILEGES"
  when: 'not ansible_check_mode and "unable to parse authentication credentials" not in should_create_admin.stdout'

- name: Create users
  influxdb_user:
    user_name: "{{ item.u }}"
    user_password: "{{ item.p }}"
    # Auth
    username: "{{ influxdb.admin.username }}"
    password: "{{ influxdb.admin.password }}"
    hostname: influxdb.galaxyproject.eu
    ssl: yes
    validate_certs: yes
  with_items:
    - u: "{{ influxdb.node.username }}"
      p: "{{ influxdb.node.password }}"
    - u: "{{ influxdb.grafana.username }}"
      p: "{{ influxdb.grafana.password }}"

- name: Create database using custom credentials
  influxdb_database:
    database_name: "{{ item }}"
    # Auth
    username: "{{ influxdb.admin.username }}"
    password: "{{ influxdb.admin.password }}"
    hostname: influxdb.galaxyproject.eu
    ssl: yes
    validate_certs: yes
  with_items:
    - galaxy
    - grt
    - galaxy_stats
    - notifications

- name: create 2 week retention policy
  influxdb_retention_policy:
    database_name: "{{ item }}"
    policy_name: oneweek
    duration: 14d
    replication: 1
    default: true
    # Auth
    username: "{{ influxdb.admin.username }}"
    password: "{{ influxdb.admin.password }}"
    hostname: influxdb.galaxyproject.eu
    ssl: yes
    validate_certs: yes
  with_items:
    - galaxy
    - notifications
  when: not ansible_check_mode # This task is not safe if DB doesn't exist.

- name: Grant permissions to galaxy
  influxdb_query:
    database_name: "{{ item }}"
    query: "GRANT ALL ON {{ item }} TO {{ influxdb.node.username }}"
    # Auth
    username: "{{ influxdb.admin.username }}"
    password: "{{ influxdb.admin.password }}"
    hostname: influxdb.galaxyproject.eu
    ssl: yes
    validate_certs: yes
  with_items:
    - galaxy
    - galaxy_stats
    - grt
    - notifications
  when: not ansible_check_mode # This task is not safe if DB doesn't exist.

- name: Grant permissions to grafana
  influxdb_query:
    database_name: "{{ item }}"
    query: "GRANT READ ON {{ item }} TO {{ influxdb.grafana.username }}"
    # Auth
    username: "{{ influxdb.admin.username }}"
    password: "{{ influxdb.admin.password }}"
    hostname: influxdb.galaxyproject.eu
    ssl: yes
    validate_certs: yes
  with_items:
    - '_internal'
    - galaxy
    - galaxy_stats
    - grt
    - notifications
  when: not ansible_check_mode # This task is not safe if DB doesn't exist.
