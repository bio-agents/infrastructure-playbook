import logging
log = logging.getLogger( __name__ )


def per_host_agent_labels( context, label ):
    """
    This agent section filter results in different labels being displayed based on
    the fqdn the user is making the request to. This could allow a single Galaxy instance
    to seem like several different instances hosting different agents based on the fqdn used
    to access the Galxy. This can be enabled by renaming this file to examples.py and adding
    the following to the ``app:main`` section of ``galaxy.yml``:

        agent_label_filters = examples:per_host_agent_labels
    """
    host = context.trans.request.host
    # Core agents used by all virtual hosts.
    valid_labels = [ "file_meta_label", "general_text_label"]
    general_ngs_labels = [ "genomics_label" ]
    # HiCagents mode: published in NAR 2018
    if "humancellatlas.usegalaxy.eu" in host or "nanopore.usegalaxy.eu" in host or "hicexplorer.usegalaxy.eu" in host or "singlecell.usegalaxy.eu" in host or "metagenomics.usegalaxy.eu" in host or "rna.usegalaxy.eu" in host or "clipseq.usegalaxy.eu" in host or "graphclust.usegalaxy.eu" in host or "annotation.usegalaxy.eu" in host or "virology.usegalaxy.eu" in host:
        valid_labels += general_ngs_labels
        return label.id in valid_labels
    if "cheminformatics.usegalaxy.eu" in host:
        return label.id in valid_labels
    if "ml.usegalaxy.eu" in host:
        return label.id in valid_labels
    if "imaging.usegalaxy.eu" in host:
        return label.id in valid_labels
    if "climate.usegalaxy.eu" in host:
        return label.id in valid_labels
    if "metabolomics.usegalaxy.eu" in host:
        return label.id in valid_labels
    if "ecology.usegalaxy.eu" in host:
        return label.id in valid_labels
    return True


BASE_SECTIONS = ["text_manipulation", "get_data", "collection_operations",
        "convert_formats", "filter_and_sort", "join__subtract_and_group"]

GENERAL_NGS_SECTIONS = ["deepagents", "bed",
        "operate_on_genomic_intervals", "fasta_fastq_manipulation",
        "fasta_fastq", "fastq_quality_control",
        "picard", "mapping", "sam_bam_manipulation"]
        
human_cell_atlas_sections = ['hca_sc_get-scrna', 'hca_sc_seurat_agents', 'hca_sc_sc3_agents', 
                      'hca_sc_scanpy_agents', 'hca_sc_monocle3_agents', 'hca_sc_scater_agents',
                      'hca_sc_scpred_agents', 'hca_sc_garnett_agents', 'hca_sc_label_analysis_agents',
                      'hca_sc_scmap_agents', 'hca_sc_sccaf_agents', 'hca_sc_utils_viz']

DOMAIN_SECTIONS = {
    'hicexplorer': GENERAL_NGS_SECTIONS + ["hicexplorer", "graph_display_data", "peak_calling"],
    'virology': GENERAL_NGS_SECTIONS + ["assembly", "annotation", "phylogenetics"],
    'nanopore': GENERAL_NGS_SECTIONS + ["nanopore", "ncbi_blast", "fasta_fastq", "assembly", "graph_display_data"],
    'ecology': ["join__subtract_and_group", "statistics", "graph_display_data", "machine_learning",
        "ncbi_blast", "fasta_fastq", "fastq_quality_control", "assembly", "dna_metabarcoding", "metagenomic_analysis",
        "mothur", "qiime", "rad_seq", "animal_detection_on_acoustic_recordings","species_abundance",
        "gis_data_handling", "climate_analysis", "interactiveagents"],
    'climate': ["climate_analysis", "gis_data_handling", "graph_display_data", "interactiveagents"],
    'metagenomics': GENERAL_NGS_SECTIONS + ["fasta_fastq_manipulation",
        "multiple_alignments", "assembly", "annotation",
        "graph_display_data", "metagenomic_analysis", "mothur", "qiime",
        "biom_manipulation"],
    'rna': GENERAL_NGS_SECTIONS + ["rna_seq", "annotation", "rna_analysis",
        "graph_display_data"],
    'singlecell': GENERAL_NGS_SECTIONS + ["rna_seq", "annotation", "rna_analysis",
        "graph_display_data", "single-cell"],
    'humancellatlas': GENERAL_NGS_SECTIONS + ["rna_seq", "annotation", "rna_analysis",
        "graph_display_data", "single-cell", "interactiveagents"] + human_cell_atlas_sections,
    'clipseq': GENERAL_NGS_SECTIONS + ["rna_seq", "peak_calling", "rna_analysis",
        "motif_agents"],
    'graphclust': GENERAL_NGS_SECTIONS + ["rna_seq", "graphclust", "rna_analysis"],
    'cheminformatics': ['chemicalagentbox'],
    'imaging': ['imaging', 'proteomics'],
    'metabolomics': ['metabolomics'],
    'ml': ['machine_learning'],
    'annotation': GENERAL_NGS_SECTIONS + ['annotation', 'apollo', 'ncbi_blast', 'assembly', 'variant_calling', 'fetch_sequences___alignments', 'ontology', 'emboss', 'evolution', 'genome_diversity', 'multiple_alignments', 'graph_display_data'],

}


def per_host_agent_sections( context, section ):
    """
    This agent section filter results in different sections being displayed based on
    the fqdn the user is making the request to. This could allow a single Galaxy instance
    to seem like several different instances hosting different agents based on the fqdn used
    to access the Galxy. This can be enabled by renaming this file to examples.py and adding
    the following to the ``app:main`` section of ``galaxy.yml``:

        agent_section_filters = examples:per_host_agent_sections
    """
    host = context.trans.request.host
    subdomain = host.replace('.usegalaxy.eu', '')

    # hide HCA agents from other subdomains than humancellatlas, do not confuse users by duplicated agents
    if section.id in human_cell_atlas_sections:
        if 'humancellatlas' in host:
            return True
        else:
            return False

    # Core agents used by all virtual hosts.
    # HiCagents mode: published in NAR 2018
    if host == "usegalaxy.eu":
        return True

    if subdomain in DOMAIN_SECTIONS:
        return section.id in DOMAIN_SECTIONS[subdomain] or section.id in BASE_SECTIONS
    else:
        return True
